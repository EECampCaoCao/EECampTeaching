// Generated by CoffeeScript 1.9.0
(function() {
  var Scene, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = window.App;

  Scene = (function() {
    function Scene() {
      this.animate = __bind(this.animate, this);
      this.render = __bind(this.render, this);
    }

    Scene.prototype.init = function() {
      var axisHelper, container, radius;
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer({
        'antialias': false
      });
      this.renderer.setSize(window.innerWidth * 0.6, window.innerHeight * 0.6);
      this.renderer.setClearColor(0xeeeeee);
      this.drone = new THREE.Object3D();
      this.loader = new THREE.ColladaLoader();
      this.loader.load('assets/ar-drone-2.dae', (function(_this) {
        return function(result) {
          result.scene.scale.divideScalar(200);
          _this.drone.add(result.scene);
          return _this.render();
        };
      })(this));
      this.scene.add(this.drone);
      axisHelper = new THREE.AxisHelper(1.5);
      this.drone.add(axisHelper);
      axisHelper = new THREE.AxisHelper(4);
      this.scene.add(axisHelper);
      this.camera.position.y = -5;
      this.camera.position.z = 2;
      this.camera.up.set(0, 0.5, 1);
      this.camera.lookAt(new THREE.Vector3(0, 0, 0));
      this.scene.add(this.camera);
      this.renderer.domElement.setAttribute("id", "main-canvas");
      container = document.getElementById('canvas-wrapper');
      container.appendChild(this.renderer.domElement);
      radius = 60;
      this.controls = new THREE.TrackballControls(this.camera, container);
      this.controls.rotateSpeed = 5;
      this.controls.zoomSpeed = 5;
      this.controls.panSpeed = 1;
      this.controls.noZoom = false;
      this.controls.noPan = false;
      this.controls.staticMoving = true;
      this.controls.dynamicDampingFactor = 0.3;
      this.controls.keys = [65, 83, 68];
      return this.controls.addEventListener('change', this.render);
    };

    Scene.prototype.updateStatus = function(status) {
      var ori, pos, theta, x;
      pos = new THREE.Vector3().fromArray(status.pos);
      ori = new THREE.Matrix4();
      ori.set(status.ori[0], status.ori[1], status.ori[2], 0, status.ori[3], status.ori[4], status.ori[5], 0, status.ori[6], status.ori[7], status.ori[8], 0, 0, 0, 0, 1);
      theta = new THREE.Euler();
      theta.setFromRotationMatrix(ori);
      x = (new Date()).getTime();
      if (window.lastx === void 0 || window.lastx < x - 100) {
        root.updateChart([theta._x, theta._y, theta._z]);
        window.lastx = x;
      }
      this.drone.position.copy(pos);
      return this.drone.rotation.setFromRotationMatrix(ori);
    };

    Scene.prototype.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    Scene.prototype.animate = function() {
      requestAnimationFrame(this.animate);
      this.controls.update();
      return this.render();
    };

    Scene.prototype.start = function() {
      this.init();
      return this.animate();
    };

    return Scene;

  })();

  root.scene = new Scene();

}).call(this);
